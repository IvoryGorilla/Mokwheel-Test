<!-- Extend - Add necessary SDK script tags and configure the store -->
{% comment %}
  <script src="https://sdk.helloextend.com/extend-sdk-client/v1/extend-sdk-client.min.js" defer="defer"></script>
  <script
    src="https://sdk.helloextend.com/extend-sdk-client-shopify-addon/v1/extend-sdk-client-shopify-addon.min.js"
    defer="defer"
  ></script>
{% endcomment %}

<script>
  window.addEventListener('DOMContentLoaded', function () {
    // script 1
    const script = document.createElement('script');
    script.src = 'https://sdk.helloextend.com/extend-sdk-client/v1/extend-sdk-client.min.js';
    // script 2
    const script2 = document.createElement('script');
    script2.src =
      'https://sdk.helloextend.com/extend-sdk-client-shopify-addon/v1/extend-sdk-client-shopify-addon.min.js';
    // append body
    document.body.appendChild(script);
    document.body.appendChild(script2);
  });
  // functions
  window.addEventListener('load', function () {
      // Extend - Add necessary SDK script tags and configure the store
      //
      window.Extend.config({ storeId: '1b2b0ee1-77e8-4184-9ca4-da87b85bdde5', environment: 'production' });
      window.Extend.integration = {};
      // Extend - Analytics and writeLogs boolean
      window.Extend.integration.analytics = true;
      // Set to true while developing integration for better debugging - Be sure to set to false before going live
      window.Extend.integration.writeLogs = false;
      // Extend - QA Cypress booleans
      window.Extend.integration.isExtendPdpOfferEnabled = true;
      window.Extend.integration.isExtendOfferModalEnabled = true;
      window.Extend.integration.isExtendMainCartOfferEnabled = true;
      // Extend - QA Cypress SP booleans
      window.Extend.integration.isShippingProtectionEnabled = true;
      window.Extend.integration.isSpCheckOutExt = true;
      window.Extend.integration.isShippingProtectionOptOut = true;
      window.Extend.integration.isShippingProtectionOnMainCart = false;
      // Only defines utils if Extend and ExtendShopify is defined
      if (window.Extend && window.ExtendShopify) {
        const extendUtils = {
          /*
           * takes in object and logs it if writeLogs is true
           * @param {object} objToLog will be an object of information to log
           */
          logger: (objToLog) => {
            try {
              if (Extend.integration.writeLogs) {
                console.log('EXTEND: ', objToLog);
              }
            } catch (error) {
              console.warn('EXTEND: ' + error);
            }
          },
        };
        window.Extend.integration.utils = extendUtils;
      }

      // CART
      // Only run ajax integration if Extend and ExtendShopify is defined, and the currency is set to USD
      if (
        window.Extend &&
        window.ExtendShopify &&
        window.Shopify &&
        window.Shopify.currency &&
        window.Shopify.currency.active === 'USD'
        ) {
        /*****************************************/
        /* Global Variables - THEME SPECIFIC     */
        /*****************************************/
        let cartRowItem = '.alp-cart-line-item.line-item'; // This is the container element for each item in the cart
        let cartRowItemTitle = 'a.line-item-name'; // This is the title anchor element for the product
        let cartRowItemImage = '.alp-line-item-image-i'; // This is the product image or image anchor element
        let cartRowItemQuantity = '.quantity__input[type=number]'; // This is the input element containing the product quantity
        let warrantyContainer = '.product-extend-plan'; // This is the container where the offer will be appended
        let warrantyOriginalMeta = '.product-options .product-option'; // Each warranty metadata item we want to remove.
        let metadataContainer = ''; // This is where warranty metadata will be appended (Product and Term)
        let offerClass = 'extend-cart-offer'; // This is the class that will be assigned to each Extend offer
        let titleReformat = false; // If warranty titles contain various extra characters, set this to true. Sets title to 'Extend Protection Plan'
        let localCart = {{ cart | json }}; // Shopify Cart Object on initial load
        const extendUtils = window.Extend.integration.utils;
        const extendLogger = extendUtils.logger;
        let regEx = /\d+$/;
        // QA Cypress variables
        window.Extend.integration.mainCartRowItem = cartRowItem;
        window.Extend.integration.mainCartRowItemTitle = cartRowItemTitle;
        window.Extend.integration.mainCartRowItemImage = cartRowItemImage;
        window.Extend.integration.mainCartRowItemQuantity = cartRowItemQuantity;
        window.Extend.integration.mainCartWarrantyContainer = warrantyContainer;
        window.Extend.integration.mainCartWarrantyOriginalMeta = warrantyOriginalMeta;
        window.Extend.integration.mainCartMetadataContainer = metadataContainer;
        window.Extend.integration.mainCartOffer = offerClass;
        // Fail safe for cart
        if (!localCart) {
            console.error('EXTEND: Exiting - localCart unavailable');
            return false;
        }
        /***********************/
        /* util functions      */
        /***********************/
        // findAll(element) - querySelectorAll to search for children in document OR a parentElement
        function findAll(elementToFind, parentElement) {
            const items = parentElement
            ? parentElement.querySelectorAll(elementToFind)
            : document.querySelectorAll(elementToFind);
            return items;
        }
        /**************************************/
        /* refreshCart - THEME SPECIFIC       */
        /**************************************/
        // Refresh the cart (hard refresh by default)
        async function refreshCart() {
            await AlpFn.refreshCart('[data-ajax-cart]');
            console.log('EXTEND: Cart refreshed');
        }
        /***********************/
        /* createElement       */
        /***********************/
        // createElement(product) - Takes in the product element, and creates the Extend offer element + appends the offer
        function createElement(product, index) {
            try {
            // Removes existing offer elements before creating new ones
            let extendOffer = product.querySelector('.' + offerClass);
            if (extendOffer) extendOffer.remove();
            let url = product.querySelector(cartRowItemTitle).href;
            if (!url) {
                throw new Error('Exiting - url unavailable');
            }
            // Grabs variant ID from URL if available, otherwise from localCart
            let variantId = url.match(regEx) ? url.match(regEx)[0] : localCart.items[index].id;
            // Select quantity value
            let quantity = product.querySelector(cartRowItemQuantity).value;
            // Parent container to append ajax offer
            let container = product.querySelector(warrantyContainer);
            extendLogger({ url, variantId, quantity, container });
            // Fail safes
            if (!variantId || !quantity || !container) {
                throw new Error('Exiting - variant, quantity or container unavailable');
            }
            // Create new element & set class, data-extend-variant, and data-extend-quantity attributes
            let newExtendOffer = document.createElement('div');
            newExtendOffer.className = offerClass;
            newExtendOffer.setAttribute('data-extend-variant', variantId);
            newExtendOffer.setAttribute('data-extend-quantity', quantity);
            // Append the offer to the container element (THEME SPECIFIC)
            container.append(newExtendOffer);
            } catch (error) {
            console.error('EXTEND:', error);
            }
        }
        /************************/
        /* Handle Styling       */
        /************************/
        // Finds all cartRowItems and styles only Extend warranties
        function handleStyling() {
            findAll(cartRowItem).forEach(function (el, index) {
            try {
                // Grab the title of the current item
                let title = el.querySelector(cartRowItemTitle);
                extendLogger({ title });
                // Title fail safe
                if (!title) {
                throw new Error('Exiting - title unavailable');
                }
                // If it's a warranty set isExtend to true and remove links
                if (title.innerText.toLowerCase().indexOf('extend protection') > -1) {
                // Grab the image of the current item and fail safe
                // Select and remove pointerEvents from warranty title
                findAll('.product-item-meta__title', el).forEach((t) => {
                    t.style.pointerEvents = 'none';
                });

                if (titleReformat === true) {
                    title.innerText = 'Extend Protection Plan';
                }
                let image = el.querySelector(cartRowItemImage);
                extendLogger({ image });
                if (!image) {
                    throw new Error('Exiting - image unavailable');
                }
                // Select and remove pointerEvents from warranty image
                image.style.pointerEvents = 'none';
                /**************************************/
                /* THEME SPECIFIC STYLING START       */
                /**************************************/
                // Removes old metadata
                if (el.querySelector(warrantyOriginalMeta)) {
                    findAll(warrantyOriginalMeta, el).forEach(function (each) {
                    each.remove();
                    });
                }
                /**************************************/
                /* THEME SPECIFIC STYLING END         */
                /**************************************/
                } else {
                // Create an offer element for each product
                createElement(el, index);
                }
            } catch (error) {
                console.error('EXTEND:', error);
            }
            });
        }

        /************************/
        /* initializeCartOffer  */
        /************************/
        // Invokes handleStyling and finds all offers in the cart, handling both normalization and balancing
        function initializeCartOffer() {
            const filteredExtendProducts = localCart.items.filter(function (item) {
            return item['product_title'] === 'Extend Shipping Protection Plan';
            });
            if (filteredExtendProducts.length > 0) {
            ExtendShopify.updateSpPlanInCart({ action: 'remove' });
            location.reload();
            }
            // Handles styling and creates offer elements
            handleStyling();
            // Find all offer elements
            findAll('.' + offerClass).forEach(function (el) {
            // Grab attributes out of element
            let variantId = el.getAttribute('data-extend-variant');
            let quantity = el.getAttribute('data-extend-quantity');
            // If there's already a warranty in cart, return
            if (ExtendShopify.warrantyAlreadyInCart(variantId, localCart.items)) {
                return true;
            } else {
                // Render all other buttons
                Extend.buttons.renderSimpleOffer(el, {
                referenceId: variantId,
                onAddToCart: function (options) {
                    ExtendShopify.addPlanToCart(
                    {
                        plan: options.plan,
                        product: options.product,
                        quantity: quantity,
                    },
                    function (err) {
                        try {
                        // An error occurred
                        if (err) {
                            throw new Error({ 'Exiting - Error in onAddToCart': error });
                        } else {
                            refreshCart();
                        }
                        } catch (error) {
                        console.error('EXTEND:', error);
                        }
                    }
                    );
                },
                });
            }
            });
            // Normalization ensures there is a 1:1 relationship between the product and the warranty
            ExtendShopify.normalizeCart(
            {
                cart: localCart,
                balance: true,
            },
            function (err, data) {
                try {
                // An error occurred
                if (err) {
                    throw new Error({ 'Exiting - Error in normalizeCart': error });
                } else if (data && data.updates) {
                    // Calls refreshCart to update the cart for normalization
                    refreshCart();
                } else {
                    extendLogger('no cart updates');
                }
                } catch (error) {
                console.error('EXTEND:', error);
                }
            }
            );
        }
        // initializeCartOffer when script is initially rendered

        setTimeout(() => {
            initializeCartOffer();
            window.addEventListener('refreshAjaxCart', function (e) {
            fetch('/cart.js', {
                credentials: 'same-origin',
                method: 'GET',
                headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                },
            })
                .then((e) => {
                e.json()
                    .then((e) => {
                    if (window.Extend.integration.analytics) window.Extend.integration.cartAnalytics(localCart, e);
                    localCart = e;
                    initializeCartOffer();
                    })
                    .catch((error) => {
                    console.error('EXTEND:', error);
                    });
                })
                .catch((error) => {
                console.error('EXTEND: Failed to fetch cart - ', error);
                });
            });
        }, 1000);
      }

      // PRODUCT PAGE
      // Checks if Extend lives in the window and the active currency is USD before showing Extend offers
      if (
        window.Extend &&
        window.ExtendShopify &&
        window.Shopify.currency.active === 'USD' &&
        meta.page.pageType === 'product'
        ) {
        /************************/
        /* Initial Variables */
        /************************/
        const productFormSelector = `form[action="/cart/add"]`; // Change this to the product form element
        const addToCartButtonSelector = `form[action="/cart/add"] [type="submit"]`; // Change this to the Add-To-Cart element
        const productForm = document.querySelector(productFormSelector);
        const addToCartButton = productForm.querySelector(addToCartButtonSelector);
        const extendOffer = document.createElement('div');
        const productCategory = meta && meta.product ? meta.product.type : null;
        const insertElement = document.querySelector('.alp-extend-block');
        extendOffer.className = 'extend-offer';
        //addToCartButton.parentElement.insertBefore(extendOffer, addToCartButton);
        if (insertElement) {
            insertElement.parentElement.insertBefore(extendOffer, insertElement);
        }

        /************************/
        /* QA Cypress Variables */
        /************************/
        window.Extend.integration.productForm = productForm;
        window.Extend.integration.addToCartButton = addToCartButton;
        window.Extend.integration.extendOffer = extendOffer;

        /************************/
        /* initProductOffer */
        /************************/
        // Initializes product offers and handles ATC button functionality for the main PDP ATC
        function initProductOffer() {
            // Fail safes
            if (!productForm || !addToCartButton || !extendOffer || !insertElement) return;

            // Check if product is an extend warranty, if so disable the atc
            function isExtend() {
            if (meta.product && meta.product.vendor === 'Extend') {
                addToCartButton.disabled = true;
            }
            }

            // Checks if product is an Extend warranty and if so disables
            isExtend();

            let variantId = productForm.id.value;
            let productPrice =
            meta && meta.product && meta.product.variants
                ? parseInt(
                    meta.product.variants.filter((variant) => variant.id.toString() === variantId.toString())[0].price
                )
                : null;

            // Listens for changes to the productForm and sets the activeProduct for extend via variantID
            productForm.addEventListener('change', function () {
            variantId = productForm.id.value;
            if (variantId) {
                productPrice =
                meta && meta.product && meta.product.variants
                    ? parseInt(
                        meta.product.variants.filter((variant) => variant.id.toString() === variantId.toString())[0].price
                    )
                    : null;
                Extend.setActiveProduct(extendOffer, {
                referenceId: variantId,
                price: productPrice,
                category: productCategory,
                });
                isExtend();
            }
            });

            // Grabs the variantId from the productForm and renders the initial offers for it
            variantId = productForm.id.value;

            Extend.buttons.render(extendOffer, { referenceId: variantId, price: productPrice, category: productCategory });

            //click simulation handling add to cart
            function handleAddToCart(e) {
            e.preventDefault();
            e.stopImmediatePropagation();

            const quantityEl = productForm.querySelector('[name="quantity"]');
            const quantity = quantityEl && quantityEl.value;
            ExtendShopify.handleAddToCart(extendOffer, {
                quantity: quantity,
                modal: false,
                done: function () {
                // Trigger Analytics
                if (window.Extend.integration.analytics) window.Extend.integration.productAnalytics(variantId, quantity);
                // remove default click listener
                addToCartButton.removeEventListener('click', handleAddToCart, true);
                //click atc button
                addToCartButton.click();
                // add default click listener back
                addToCartButton.addEventListener('click', handleAddToCart, true);
                },
            });
            }

            //run handleCaddtoCart when we click ATC, capturing event
            addToCartButton.addEventListener('click', handleAddToCart, true);
        }

        // Initial product offer render
        initProductOffer();
      }

      // AFTER MARKET
      if (
      window.Extend &&
      window.ExtendShopify &&
      window.Shopify &&
      window.Shopify.currency &&
      window.Shopify.currency.active === 'USD'
    ) {
      try {
        // Get params from URL
        const params = new URL(document.location).searchParams;
        // Check if leadToken or leadtoken is in the URL
        let leadToken = params.get('leadToken') ? params.get('leadToken') : params.get('leadtoken');
        if (leadToken) {
          Extend.aftermarketModal.open({
            leadToken: leadToken,
            onClose: function (plan, product, quantity) {
              if (plan && product) {
                ExtendShopify.addPlanToCart(
                  {
                    plan: plan,
                    product: product,
                    leadToken: leadToken,
                    quantity: quantity || 1,
                  },
                  function () {
                    window.location = '/cart';
                  }
                );
              }
            },
          });
        }
      } catch (error) {
        console.error('EXTEND: ' + error);
      }
    }

    // Analytics
    // Only run ajax integration if Extend and ExtendShopify is defined, the currency is set to USD and analytics are enabled
    if (
      window.Extend &&
      window.ExtendShopify &&
      Extend.integration.analytics &&
      window.Shopify &&
      window.Shopify.currency &&
      window.Shopify.currency.active === 'USD'
    ) {
      /***********************/
      /* util functions      */
      /***********************/
      // getPlanId - Takes in the cart and a product ID and returns the plan ID for that product
      function getPlanId(cart, productId) {
        let planId;
        cart.items.forEach(function (item) {
          if (item.properties.Ref && item.properties.Ref === productId) planId = item.sku.toString();
        });
        return planId;
      }
      /***********************/
      /* end util functions  */
      /***********************/
      // productAnalytics() - Takes in the product ID and quantity at the time it is added to the cart
      let productAnalytics = function (prodId, prodQty) {
        if (prodId) {
          if (!prodQty) prodQty = 1;
          Extend.trackProductAddedToCart({ productId: prodId.toString(), productQuantity: parseInt(prodQty) });
        } else {
          console.warn('Extend: Product id is ' + prodId);
        }
      };
      // cartAnalytics() - Takes in the oldCart and the newCart at a point where the cart updates
      let cartAnalytics = function (oldCart, newCart) {
        try {
          //if there is an old or new cart with items.
          if (oldCart && newCart && oldCart.items && newCart.items) {
            // Triggers if an item has been removed
            if (oldCart.items.length > newCart.items.length) {
              oldCart.items.forEach(function (currentItem) {
                let productFound = false;
                newCart.items.forEach(function (currentNewItem) {
                  if (currentItem.id == currentNewItem.id) {
                    productFound = true;
                  }
                });
                // making sdk call of which product was removed from cart
                if (productFound === false) {
                  if (currentItem.vendor === 'Extend' && currentItem && currentItem.sku && currentItem.properties.Ref) {
                    Extend.trackOfferRemovedFromCart({
                      productId: currentItem.properties.Ref.toString(),
                      planId: currentItem.sku.toString(),
                    });
                  } else if (currentItem.id) {
                    Extend.trackProductRemovedFromCart({ productId: currentItem.id.toString() });
                  }
                }
              });
              // Triggers if an item quantity has changed
            } else if (oldCart.item_count != newCart.item_count) {
              oldCart.items.forEach(function (currentItem) {
                newCart.items.forEach(function (currentNewItem) {
                  // Runs when the updated item is found if its not an Extend warranty
                  if (
                    currentItem.id == currentNewItem.id &&
                    currentItem.quantity != currentNewItem.quantity &&
                    currentItem.vendor != 'Extend'
                  ) {
                    if (
                      currentItem.id &&
                      currentNewItem.quantity &&
                      ExtendShopify.warrantyAlreadyInCart(currentItem.id.toString(), oldCart.items)
                    ) {
                      // Gets the associated plan ID using the product ID
                      let planId = getPlanId(newCart, currentItem.id.toString());
                      // Product has warranty in cart
                      Extend.trackOfferUpdated({
                        productId: currentItem.id.toString(),
                        planId: planId,
                        updates: {
                          warrantyQuantity: parseInt(currentNewItem.quantity),
                          productQuantity: parseInt(currentNewItem.quantity),
                        },
                      });
                    } else if (currentItem.id && currentNewItem.quantity) {
                      // Product has no warranty in cart
                      Extend.trackProductUpdated({
                        productId: currentItem.id.toString(),
                        updates: {
                          productQuantity: parseInt(currentNewItem.quantity),
                        },
                      });
                    }
                  }
                });
              });
            }
          } else {
            console.warn('EXTEND: corrupt cart objects');
          }
        } catch (error) {
          console.error('EXTEND: ' + error);
        }
      };
      window.Extend.integration.productAnalytics = productAnalytics;
      window.Extend.integration.cartAnalytics = cartAnalytics;
    }

  });
</script>
