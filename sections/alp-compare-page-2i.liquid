{% schema %}
{
  "name": "Alp Compare Page 2i",
  "class": "alp-compare-2",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Compare Models"
    },
    {
      "type": "text",
      "id": "product_collection",
      "label": "Product Collection",
      "default": "electric-bikes"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "select",
      "id": "container",
      "label": "Layout",
      "default": "alp-container",
      "options": [
        {
          "value": "alp-container",
          "label": "Default"
        },
        {
          "value": "alp-container-fluid",
          "label": "Fluid container"
        },
        {
          "value": "alp-full-width",
          "label": "Full width"
        }
      ]
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Padding top",
      "default": 10,
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "em"
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Padding bottom",
      "default": 10,
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "em"
    },
    {
      "type": "checkbox",
      "id": "reset_spacing",
      "label": "Remove default space between sections",
      "default": false
    }
  ],
  "blocks": [
    {
      "type": "product-item",
      "name": "Product Item",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Alp Compare Page 2i"
    }
  ]
}
{% endschema %}

{{ 'alp-compare-2i.css' | asset_url | stylesheet_tag }}

{% style %}
{% endstyle %}

{% liquid
  assign st = section.settings
  assign container = st.container
  assign reset_spacing = ''
  if st.reset_spacing
    assign reset_spacing = ' remove_spacing'
  endif
%}

{%- capture style -%}
    --bg-color: {{ st.bg_color }};--text-color: {{ st.text_color }};--padding-top: {{ st.padding_top }};--padding-bottom: {{ st.padding_bottom }};
{%- endcapture -%}

<div class="alp-section {{ reset_spacing }}" style="{{ style }}">
  <div class="alp-section-container page-width {{ container }}">
    <div class="alp-the-compare-wrapper">
      <div class="alp-the-compare-container">
        <div class="the-compare-title has-buttons">
          <div class="headline__h2s">{{ section.settings.title }}</div>
          <div class="the-compare-buttons">
            <div class="the-compare-counts">
              Showing
              <span class="the-compare-feature-count"> <b>0</b> Features </span>
            </div>
            <div class="the-compare-button the-compare-diff">
              <span>Compare Different</span>
              {% render 'icon-check' %}
            </div>
            <div class="the-compare-button the-compare-feature">
              <span>Features</span>
              {% render 'icon-arrow-down' %}
            </div>
          </div>
          {% render 'alp-compare-features-filter', section: section %}
        </div>
        <div class="alp-the-compare-list-wrapper t-compare-2">
          <div class="alp-the-compare-list-2">
            {% comment %} Static Part: Titles {% endcomment %}
            <div class="alp-the-compare-list-titles">
              <div class="alp-the-compare-list-t-p1">
                <div class="compare_spec_list_title">
                  <div class="csl-title">E-Bike Model</div>
                </div>
              </div>
              <div class="alp-the-compare-list-t-p2">
                {%- for block in section.blocks -%}
                  {%- if forloop.first -%}
                    {%- assign product = block.settings.product -%}
                    {% for item in product.metafields.custom.product_comparison.value %}
                      <div class="compare_spec_list_title">
                        {%- if item.title != '' -%}
                          <div class="csl-title">{{ item.title }}</div>
                        {%- endif -%}
                      </div>
                    {% endfor %}
                    <div class="compare_spec_list_title cct-price">
                      <div class="csl-title">Price</div>
                    </div>
                  {%- endif -%}
                {% endfor %}
              </div>
              {% comment %} View More And Price (Dynamic Render) {% endcomment %}
              <div class="compare-bottom-button hide_desktop_row">
                <div class="compare-bottom-button-flex first-row">
                  <div class="to_detail">
                    <a href="javascript:;">
                      <span>V</span>
                    </a>
                  </div>
                </div>
              </div>
              {% comment %} View More And Price (Dynamic Render) End {% endcomment %}
            </div>
            {% comment %} Static Part: Titles End {% endcomment %}
            {%- for block in section.blocks -%}
              {%- assign product = block.settings.product -%}
              <div class="alp-the-compare-item-wrapper-2">
                <div class="alp-the-compare-select-wrapper">
                  <div class="alp-the-compare-select">
                    <div class="compare-select-i">
                      <span>{{- product.title -}}</span>
                      {% render 'icon-arrow-down' %}
                    </div>
                    <div class="compare-delete-i">
                      {% render 'icon-delete' %}
                    </div>
                    <div class="compare-select-choice">
                      {% for the_product in collections['electric-bikes'].products %}
                        <span>{{- the_product.title -}}</span>
                      {% endfor %}
                    </div>
                  </div>
                </div>
                {% comment %} Dynamic Render Part {% endcomment %}
                <div class="alp-the-compare-item" data-swatch-wrapper>
                  {% render 'alp-compare-render-part', product: product %}
                </div>
                {% comment %} Dynamic Render Part End {% endcomment %}
              </div>
            {%- endfor -%}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    var product_compare_data = [
        {% for product in collections['electric-bikes'].products %}
          {
          data:  
          `
          {% render 'alp-compare-render-part', product: product %}
          `
        },
        {% endfor %}
      ]
</script>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
    // compare select open
    document.addEventListener('click', (e) => {
      //console.log(e.target.className);
      if (e.target.className !== 'compare-select-i' && e.target.className !== 'compare-select-choice') {
        $('.compare-select-i').parent().removeClass('active');
      } else if (e.target.className == 'compare-select-i') {
        $('.compare-select-i').parent().removeClass('active');
        e.target.parentElement.classList.add('active');
      }
    });

    // compare select
    $('.compare-select-choice span').click(function () {
      let $this = $(this);
      let $text = $this.text();
      let $index = $this.index();
      let $product_data = product_compare_data[$index].data;
      $this.parents('.alp-the-compare-item-wrapper-2').find('.alp-the-compare-item').html($product_data);
      $('.compare-select-i').parent().removeClass('active');
      $this.parents('.alp-the-compare-item-wrapper-2').find('.compare-select-i span').html($text);
      AlpFn.ColorSwatchSwitch(
        '.alp-the-compare-item-wrapper-2 .alp-colors-swatch-i',
        '[data-swatch-wrapper]',
        '[data-options]'
      );
      //
      matchFeaturesFilter();
      matchTheDiff('.alp-the-compare-list-t-p2 .compare_spec_list_title', '.compare_spec_list');
      calcMaxItemHeight('.alp-the-compare-list-t-p1 .compare_spec_list_title, .pro_img_wrappper.alp_pro_color_switch');
      calcMaxItemHeight2('.alp-the-compare-list-t-p2 .compare_spec_list_title', '.compare_spec_list');
    });

    // watch window.location.search like '?products=Corgi,Flamingo', and trigger '.compare-select-choice span' click when the name match
    function watchSearch() {
      let params = new URLSearchParams(window.location.search);
      if (params.has('products')) {
        let name = params.get('products');
        // turn name to array
        name = name.split(',');
        console.log(name);
        // foreach name
        let i = 0;
        name.forEach((item) => {
          $('.alp-the-compare-item-wrapper-2')
            .eq(i)
            .find('.compare-select-choice span')
            .each(function () {
              let $this = $(this);
              if ($this.text() == item) {
                $this.trigger('click');
              }
            });
          i++;
        });
      }
    }
    watchSearch();

    // calculate the max height
    function calcMaxItemHeight(elements) {
      let $elements = $(elements);
      let maxHeight = 0;
      // reset the max height
      $elements.css('--min-height', maxHeight);
      // get the max height
      $elements.each(function () {
        maxHeight = Math.max(maxHeight, $(this).outerHeight());
      });
      // console.log(maxHeight);
      // then set the max height to all elements
      $elements.css('--min-height', maxHeight);
    }
    calcMaxItemHeight('.alp-the-compare-list-t-p1 .compare_spec_list_title, .pro_img_wrappper.alp_pro_color_switch');

    // calculate the max height
    function calcMaxItemHeight2(elements, elements2) {
      let $elements = $(elements);
      let $elements2 = $(elements2);
      let maxHeight = 0;
      // reset the max height
      $elements.css('--min-height', maxHeight);
      $elements2.children().css('--min-height', maxHeight);
      // get the max height
      $elements.each(function () {
        let $this = $(this);
        let thisIndex = $this.index();
        $elements2.each(function () {
          let $this_children = $(this).children().eq(thisIndex);
          maxHeight = Math.max(maxHeight, $this_children.outerHeight());
        });
        maxHeight = Math.max(maxHeight, $(this).outerHeight());
        // then set the max height to all this elements
        $this.css('--min-height', maxHeight);
        $elements2.each(function () {
          let $this_children = $(this).children().eq(thisIndex);
          $this_children.css('--min-height', maxHeight);
        });
      });
    }
    calcMaxItemHeight2('.alp-the-compare-list-t-p2 .compare_spec_list_title', '.compare_spec_list');

    // resize
    window.addEventListener('resize', function () {
      calcMaxItemHeight('.alp-the-compare-list-t-p1 .compare_spec_list_title, .pro_img_wrappper.alp_pro_color_switch');
      calcMaxItemHeight2('.alp-the-compare-list-t-p2 .compare_spec_list_title', '.compare_spec_list');
    });

    // bottom fixed
    function SetScrollingBottom() {
      let $wrapper_parent = document.querySelector('.t-compare-2');
      let $wrapper = '.alp-the-compare-item-wrapper-2, .alp-the-compare-list-titles';
      let $target = '.compare-bottom-button';
      document.querySelectorAll($target).forEach((el) => {
        let rectThis = el.getBoundingClientRect();
        let rect = el.children[0].getBoundingClientRect();
        let rectTop = rectThis.top;
        let rectHeihgt = rect.height;
        let screenHeight = window.innerHeight;
        if (rectTop + rectHeihgt >= screenHeight) {
          // set css variables
          // el.style.setProperty('--transform', `translateY(-${rectTop + rectHeihgt - screenHeight}px)`);
          el.style.setProperty('--left', `${rectThis.left}px`);
          el.style.setProperty('--height', `${rect.height}px`);
          el.style.setProperty('--width', `${rectThis.width}px`);
          $wrapper_parent.style.setProperty('--height', `${rect.height}px`);
          // add class
          el.classList.add('bottom_fixed');
          $wrapper_parent.classList.add('bottom_fixed');
        } else {
          // remove class
          el.classList.remove('bottom_fixed');
          $wrapper_parent.classList.remove('bottom_fixed');
        }
      });
      window.requestAnimationFrame(SetScrollingBottom);
    }
    // run requestAnimationFrame
    window.requestAnimationFrame(SetScrollingBottom);

    // top fixed
    function SetScrollingTop() {
      let $wrapper_parent = document.querySelector('.t-compare-2');
      let $target = '.alp-the-compare-select-wrapper';
      document.querySelectorAll($target).forEach((el) => {
        let rectThis = el.getBoundingClientRect();
        let rect = el.children[0].getBoundingClientRect();
        let headerHeight = document.querySelector('.alp-header-section.sticky-el').offsetHeight;
        if (
          rectThis.top <= headerHeight &&
          $wrapper_parent.getBoundingClientRect().height + rectThis.top > window.innerHeight / 2
        ) {
          el.classList.add('top_fixed');
          el.style.setProperty('--top', `${headerHeight}px`);
          el.style.setProperty('--left', `${rectThis.left}px`);
          el.style.setProperty('--height', `${rect.height}px`);
          el.style.setProperty('--width', `${rectThis.width}px`);
        } else {
          el.classList.remove('top_fixed');
        }
      });
      window.requestAnimationFrame(SetScrollingTop);
    }
    // run requestAnimationFrame
    window.requestAnimationFrame(SetScrollingTop);

    // match the different
    function matchTheDiff(elements, elements2) {
      let $elements = $(elements);
      let $elements2 = $(elements2);
      $elements.each(function () {
        let $text = [];
        let $this = $(this);
        let thisIndex = $this.index();
        $elements2.each(function () {
          let $this_children = $(this).children().eq(thisIndex).find('.csl-desc');
          $text.push($this_children.text());
        });
        // console.log($text)
        let isDifferent = false;
        // foreach $text
        $text.forEach(function (item) {
          if (item !== $text[0]) {
            isDifferent = true;
          }
        });
        if (isDifferent) {
          $this.addClass('item-different');
          $elements2.each(function () {
            $(this).children().eq(thisIndex).addClass('item-different');
          });
        } else {
          $this.removeClass('item-different');
          $elements2.each(function () {
            $(this).children().eq(thisIndex).removeClass('item-different');
          });
        }
      });
    }
    matchTheDiff('.alp-the-compare-list-t-p2 .compare_spec_list_title', '.compare_spec_list');
    // click
    $('.the-compare-diff').click(function () {
      if ($(this).hasClass('active')) {
        $(this).removeClass('active');
        $(this).parents('.alp-the-compare-wrapper').removeClass('active-different');
      } else {
        $(this).addClass('active');
        $(this).parents('.alp-the-compare-wrapper').addClass('active-different');
      }
      matchTheDiff('.alp-the-compare-list-t-p2 .compare_spec_list_title', '.compare_spec_list');
    });

    // feature filter
    function matchFeaturesFilter() {
      let $checkBoxEls = $('.feature-i-checkbox');
      let $targetEls = $('.csl-title');
      $targetEls.parent().addClass('item-feature-hide');
      $checkBoxEls.each(function () {
        let $this = $(this);
        let $thisText = $this.find('span').text();
        if ($this.hasClass('checked')) {
          $targetEls.each(function () {
            if ($(this).text() == $thisText) {
              $(this).parent().removeClass('item-feature-hide');
            }
          });
        }
      });
      let $checkedLength = $checkBoxEls.filter('.checked').length;
      $('span.the-compare-feature-count b').text($checkedLength);
    }
    matchFeaturesFilter();

    function deleteItem() {
      $(`.compare-delete-i`).click(function () {
        $(this).parents('.alp-the-compare-item-wrapper-2').remove();
      });
    }
    deleteItem();

    // '.feature-i-checkbox' click
    $('.feature-i-checkbox').click(function () {
      let $this = $(this);
      if ($this.hasClass('checked')) {
        $this.removeClass('checked');
      } else {
        $this.addClass('checked');
      }
      matchFeaturesFilter();
    });
    // [data-select-all] click
    $(`[data-select-all]`).click(function () {
      $('.feature-i-checkbox').addClass('checked');
      matchFeaturesFilter();
    });
    // [data-deselect-all] click
    $(`[data-deselect-all]`).click(function () {
      $('.feature-i-checkbox').removeClass('checked');
      matchFeaturesFilter();
    });
    // features filter open
    $('.the-compare-feature').click(function () {
      if ($(this).hasClass('active')) {
        $(this).removeClass('active');
        $('.alp-the-compare-features-filter , .alp-the-compare-features-bg').removeClass('active');
      } else {
        $(this).addClass('active');
        $('.alp-the-compare-features-filter , .alp-the-compare-features-bg').addClass('active');
      }
    });
    // .alp-the-compare-features-bg click
    $('.alp-the-compare-features-bg').click(function () {
      $('.alp-the-compare-features-filter , .alp-the-compare-features-bg , .the-compare-feature').removeClass('active');
    });
  });
</script>
